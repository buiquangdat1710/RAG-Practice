from typing import List, Dict

class Reflection:
    def __init__(self, llm_client):
        """
        llm_client: OpenAI client ƒë√£ kh·ªüi t·∫°o (vd: openai)
        """
        self.llm_client = llm_client

    def rewrite(self, messages: List[Dict], current_query: str) -> str:
        """
        Vi·∫øt l·∫°i current_query th√†nh c√¢u h·ªèi ƒë·ªôc l·∫≠p t·ª´ context.

        :param messages: L·ªãch s·ª≠ chat (d·∫°ng OpenAI chat messages)
        :param current_query: C√¢u h·ªèi hi·ªán t·∫°i t·ª´ ng∆∞·ªùi d√πng
        :return: C√¢u h·ªèi ƒë√£ vi·∫øt l·∫°i
        """
        # L·∫•y 10 messages g·∫ßn nh·∫•t kh√¥ng ph·∫£i role = system
        chat_history = [msg for msg in messages if msg['role'] in ('user', 'assistant')][-10:]

        history_text = ""
        for msg in chat_history:
            role = "Kh√°ch" if msg["role"] == "user" else "Bot"
            history_text += f"{role}: {msg['content']}\n"
        history_text += f"Kh√°ch: {current_query}\n"

        prompt = [
            {
                "role": "system",
                "content": "Given a chat history and the latest user question which might reference context in the chat history, formulate a standalone question which can be understood without the chat history. Do NOT answer the question."
            },
            {
                "role": "user",
                "content": history_text
            }
        ]

        # G·ªçi LLM ƒë·ªÉ rewrite c√¢u h·ªèi
        response = self.llm_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=prompt
        )

        rewritten = response.choices[0].message.content.strip()
        print(f"üîÅ Reflection: \"{rewritten}\"")
        return rewritten
